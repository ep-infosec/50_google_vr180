// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.vr180.common.opengl;

/**
 * A class that generates a mesh grid as a triangle strip.
 */
public class MeshGrid {
  /**
   * A function that creates a mesh grid using a triangle strip. The mesh grid
   * is defined a sequence of (x, y) pairs, i.e. {x1, y1, x2, y2, ...}.
   * <p> The range of the mesh grid is defined as [left, right] x [top, bottom].
   * <p> The strip is generated by inserting two degenerate vertices at the
   * end of each row in the grid.
   * <p> Typically this mesh can be rendered in OpenGL as a TRIANGLE_STRIP.
   *
   * @param left the start value of the mesh grid along the x-axis
   * @param right the end value of the mesh grid along the x-axis
   * @param top the start value of the mesh grid along the y-axis
   * @param bottom the end value of the mesh grid along the y-axis
   * @param numDivisionsX the number of divisions along the x-axis
   * @param numDivisionsY the number of divisions along the y-axis
   * @return the array of (x, y) float pairs defining the mesh grid
   */
  public static float[] createStrip(float left, float right,
      float top, float bottom, int numDivisionsX, int numDivisionsY) {
    int numVertices = 2 * numDivisionsY * (numDivisionsX + 1)
        + (numDivisionsY - 1) * 2;
    float[] vertices = new float[2 * numVertices];
    float dX = (right - left) / numDivisionsX;
    float dY = (bottom - top) / numDivisionsY;
    int index = 0;
    float y = top;
    float lastRow = numDivisionsY - 1;
    for (int j = 0; j <= lastRow; ++j, y += dY) {
      if (j > 0) {
        // Add two degenerate triangles to skip to the next row.
        vertices[index++] = vertices[index - 3];
        vertices[index++] = vertices[index - 3];
        vertices[index++] = left;
        vertices[index++] = y;
      }
      float nextY = (j == lastRow) ? bottom : (y + dY);
      float x = left;
      for (int i = 0; i <= numDivisionsX; ++i, x += dX) {
        vertices[index++] = x;
        vertices[index++] = y;
        vertices[index++] = x;
        vertices[index++] = nextY;
      }
    }
    return vertices;
  }
}
